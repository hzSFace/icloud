<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.1.4.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.sface</groupId>
    <artifactId>icloud</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>icloud</name>
    <description>Spring Cloud</description>

    <modules>
        <!-- 硬编码实现服务调用 -->
        <module>microservice-simple-provider-user</module>
        <module>microservice-simple-consumer-movie</module>
        <!-- 服务监控 -->
        <module>microservice-simple-actuator</module>
        <!-- Eureka Server -->
        <module>microservice-discovery-eureka</module>
        <module>microservice-provider-user</module>
        <module>microservice-consumer-movie</module>
        <!-- Eureka Server集群 -->
        <module>microservice-discovery-eureka-cluster</module>
        <!-- Eureka Server用户认证 -->
        <module>microservice-discovery-eureka-authenticating</module>
        <!-- Eureka Server自定义原数据 -->
        <module>microservice-provider-user-metadata</module>
        <module>microservice-consumer-movie-metadata</module>
        <!-- Eureka Server and Ribbon 实现微服务调用负载均衡 -->
        <module>microservice-consumer-movie-ribbon</module>
        <!-- Java代码实现自定义Ribbon配置 -->
        <module>microservice-consumer-movie-ribbon-customizing</module>
        <!-- 配置文件属性实现自定义Ribbon配置 -->
        <module>microservice-consumer-movie-ribbon-customizing-property</module>
        <!-- 使用Feign实现声明式REST调用，也就是简化URL的拼接 -->
        <module>microservice-consumer-movie-feign</module>
        <!-- 自定义Feign配置，使用Feign自定义注解 -->
        <module>microservice-consumer-movie-feign-customizing</module>
        <!-- 自定义Feign配置，使用Feign自定义注解 -->
        <module>microservice-provider-user-with-auth</module>
    </modules>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
        <spring-cloud.version>Greenwich.SR1</spring-cloud.version>
    </properties>

    <dependencies>
        <!-- 核心模块，包括自动配置支持、日志和YAML -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>

        <!-- 测试模块，包括JUnit、Hamcrest、Mockito -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- 添加web模块 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- 开发环境改动代码实时生效，打包生产环境禁用
            如果你使用java -jar启动应用或者用一个特定的classloader启动，它会认为这是一个“生产环境”
         -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- jpa是利用Hibernate生成各种自动化的sql，如果只是简单的增删改查，基本上不用手写了 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <!-- mysql -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>

        <!-- 引入redis 不带data的已经废弃-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>

        <!-- Spring -->
        <dependency>
            <groupId>org.springframework.session</groupId>
            <artifactId>spring-session-data-redis</artifactId>
        </dependency>

        <!-- mybatis -->
        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
            <version>1.1.1</version>
        </dependency>

        <!-- 视图模板 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>
    </dependencies>

    <!-- 引入Spring Cloud依赖 -->
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <!-- 添加Spring Boot的Maven插件 -->
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

</project>
